WIDTH e HEIGHT são, respectivamente, Comprimento e Altura.

a struct Minhoca armazena a coordenada de cada segmento da minhoca.
Será alocada dinâmicamente com tamanho (altura x tamanho) - 1 índices.
que é justamente o espaço do mapa 2D, Ex: 25*10-1= 249 espaços.
Subtrai um pois é a cabeça da minhoca, a cabeça da minhoca é separada da struct.
x e y na main possuem controle da posição atual da cabeça da minhoca.

int direção é a vár. que terá controle da tecla pressionada. 
bool cresceu é a vár. que dirá se a minhoca comeu a maçã.


void atualizarMinhoca(Minhoca *minhoca, int x, int y, int *tam, bool *cresceu);
	Atualiza e controla as posições e trajetos da minhoca
	Verifica se a minhoca comeu a maçã e deve crescer tamanho
	Mantém controle do tamanho atual da minhoca
	Inicializa com endereço do "tamanho" e do "cresceu".

void desenharMinhoca(Minhoca *minhoca, int tam);
	Gera a minhoca no jogo com suas posições atuais.

void desenharParedes();
  Gera as paredes com base na altura. e comp. setados no #define.

bool checaColisao(int x, int y); 
	Verifica se a minhoca irá colidir com uma parede
	Se ela colidir, transfere a minhoca para o lado oposto
	da parede, mantendo sempre a minhoca em movimento.
	true = colidiu, false = não colidiu.

bool checaMorte(Minhoca *minhoca, int x, int y, int tamanho);
	Verifica se a cabeça da minhoca colidiu com si mesma.
	Se sim, resultará true, indicando término da rodada.

void mostrarInfo();
	Apenas para mostrar algumas informações na tela.

Devido a essa última função, aumentar o tamanho no mapa nos #define's pode acabar
com o mapa misturado com as mensagens, para corrigir, bastante remover essa função
da main() e apagar os outros mvprintw() acima da chamada da função.